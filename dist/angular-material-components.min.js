!function () {
  angular.module("ngMaterial.components.templates", []).run(["$templateCache", function (e) {
    e.put("date-picker/date-picker-dialog.html", '<md-dialog class="mdc-date-picker">\r\n    <!-- Date picker -->\r\n    <div md-theme="{{mdTheme}}">\r\n      <!-- Current day of week -->\r\n      <md-toolbar class="md-hue-2 mdc-date-picker__current-day-of-week">\r\n        <span>{{ moment(selected.date).format(\'dddd\') }}</span>\r\n      </md-toolbar>\r\n\r\n      <!-- Current date -->\r\n      <md-toolbar class="mdc-date-picker__current-date">\r\n        <span>{{ moment(selected.date).format(\'MMM\') }}</span>\r\n        <strong>{{ moment(selected.date).format(\'DD\') }}</strong>\r\n        <a ng-click="displayYearSelection()">{{ moment(selected.date).format(\'YYYY\') }}</a>\r\n      </md-toolbar>\r\n\r\n      <!-- Calendar -->\r\n      <div class="mdc-date-picker__calendar" ng-if="!yearSelection">\r\n        <div class="mdc-date-picker__nav">\r\n          <md-button class="md-fab md-primary" aria-label="Previous month" ng-click="previousMonth()">\r\n            <i class="mdi mdi-chevron-left"></i>\r\n          </md-button>\r\n\r\n          <span>{{ activeDate.format(\'MMMM YYYY\') }}</span>\r\n\r\n          <md-button class="md-fab md-primary" arial-label="Next month" ng-click="nextMonth()">\r\n            <i class="mdi mdi-chevron-right"></i>\r\n          </md-button>\r\n        </div>\r\n\r\n        <div class="mdc-date-picker__days-of-week">\r\n          <span ng-repeat="day in daysOfWeek">{{ day }}</span>\r\n        </div>\r\n\r\n        <div class="mdc-date-picker__days">\r\n                    <span class="mdc-date-picker__day mdc-date-picker__day--is-empty"\r\n                          ng-repeat="x in emptyFirstDays">&nbsp;</span><!--\r\n\r\n                 --><div class="mdc-date-picker__day"\r\n                         ng-class="{ \'mdc-date-picker__day--is-selected\': day.selected,\r\n                                     \'mdc-date-picker__day--is-today\': day.today }"\r\n                         ng-repeat="day in days">\r\n          <a ng-click="select(day)">{{ day ? day.format(\'D\') : \'\' }}</a>\r\n        </div><!--\r\n\r\n                 --><span class="mdc-date-picker__day mdc-date-picker__day--is-empty"\r\n                          ng-repeat="x in emptyLastDays">&nbsp;</span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Year selection -->\r\n      <div class="mdc-date-picker__year-selector" ng-show="yearSelection">\r\n        <a class="mdc-date-picker__year"\r\n           ng-class="{ \'mdc-date-picker__year--is-active\': year == activeDate.format(\'YYYY\') }"\r\n           ng-repeat="year in years"\r\n           ng-click="selectYear(year)"\r\n           ng-if="yearSelection">\r\n          <span>{{year}}</span>\r\n        </a>\r\n      </div>\r\n\r\n      <!-- Actions -->\r\n      <div class="md-actions mdc-date-picker__actions" layout="row" layout-align="end">\r\n        <md-button class="md-primary" ng-click="cancel()">Cancel</md-button>\r\n        <md-button class="md-primary" ng-click="closePicker()">Ok</md-button>\r\n      </div>\r\n    </div>\r\n</md-dialog>\r\n'), e.put("date-picker/date-picker-input.html", '<md-input-container ng-click="openPicker($event)">\r\n  <label>{{label}}</label>\r\n  <input type="text" ng-model="selected.model" ng-disabled="true" ng-click="openPicker($event)">\r\n</md-input-container>\r\n')
  }])
}(), function () {
  "use strict";
  angular.module("ngMaterial.components.datePicker", ["ngMaterial"]).controller("mdcDatePickerController", function (e, a, t, n, r, d, c, o) {
    function i(e) {
      return e ? e : (null !== navigator.language ? navigator.language : navigator.browserLanguage).split("_")[0].split("-")[0] || "en"
    }

    function l() {
      var a = [], t = angular.copy(e.activeDate).date(0), n = angular.copy(e.activeDate).date(1), r = angular.copy(n).endOf("month"), d = angular.copy(r).date();
      e.emptyFirstDays = [];
      for (var c = 0 === n.day() ? 6 : n.day() - 1; c > 0; c--)e.emptyFirstDays.push({});
      for (var o = 0; d > o; o++) {
        var i = angular.copy(t.add(1, "days"));
        i.selected = angular.isDefined(e.selected.model) && i.isSame(e.selected.date, "day"), i.today = i.isSame(moment(), "day"), a.push(i)
      }
      e.emptyLastDays = [];
      for (var l = 7 - (0 === r.day() ? 7 : r.day()); l > 0; l--)e.emptyLastDays.push({});
      e.days = a
    }

    e.model = r, e.mdTheme = c ? c : "default";
    var m;
    this.build = function (a) {
      m = a, moment.locale(m), angular.isDefined(e.model) ? (e.selected = {
        model: moment(e.model, o).format(o),
        date: moment(e.model, o).toDate()
      }, e.activeDate = moment(e.model, o)) : (e.selected = {
        model: void 0,
        date: new Date
      }, e.activeDate = moment()), e.moment = moment, e.days = [], e.daysOfWeek = [moment.weekdaysMin(1), moment.weekdaysMin(2), moment.weekdaysMin(3), moment.weekdaysMin(4), moment.weekdaysMin(5), moment.weekdaysMin(6), moment.weekdaysMin(0)], e.years = [];
      for (var t = moment().year() - 100; t <= moment().year() + 100; t++)e.years.push(t);
      l()
    }, this.build(i(d)), e.previousMonth = function () {
      e.activeDate = e.activeDate.subtract(1, "month"), l()
    }, e.nextMonth = function () {
      e.activeDate = e.activeDate.add(1, "month"), l()
    }, e.select = function (a) {
      e.selected = {model: a.format(o), date: a.toDate()}, e.model = a.toDate(), l()
    }, e.selectYear = function (a) {
      e.yearSelection = !1, e.selected.model = moment(e.selected.date).year(a).format(o), e.selected.date = moment(e.selected.date).year(a).toDate(), e.model = moment(e.selected.date).toDate(), e.activeDate = e.activeDate.add(a - e.activeDate.year(), "year"), l()
    }, e.displayYearSelection = function () {
      var t = n[0].getElementsByClassName("mdc-date-picker__calendar")[0].offsetHeight, r = n[0].getElementsByClassName("mdc-date-picker__year-selector")[0];
      r.style.height = t + "px", e.yearSelection = !0, a(function () {
        var e = n[0].getElementsByClassName("mdc-date-picker__year--is-active")[0];
        r.scrollTop = r.scrollTop + e.offsetTop - r.offsetHeight / 2 + e.offsetHeight / 2
      })
    }, e.cancel = function () {
      t.hide()
    }, e.closePicker = function () {
      t.hide(e.selected)
    }
  }).controller("mdcDatePickerInputController", function (e, a, t, n) {
    e.selected = angular.isDefined(e.model) ? {
      model: moment(e.model, e.dateFormat).format(e.dateFormat),
      date: e.model
    } : {model: void 0, date: new Date}, e.openPicker = function (t) {
      e.yearSelection = !1, n.show({
        targetEvent: t,
        templateUrl: "date-picker/date-picker-dialog.html",
        controller: "mdcDatePickerController",
        locals: {model: e.model, locale: a.locale, mdTheme: a.dialogMdTheme, dateFormat: e.dateFormat}
      }).then(function (a) {
        a && (e.selected = a, e.model = a.model)
      })
    }
  }).directive("mdcDatePicker", function () {
    return {
      restrict: "AE",
      controller: "mdcDatePickerInputController",
      scope: {model: "=", label: "@", dateFormat: "@"},
      templateUrl: "date-picker/date-picker-input.html"
    }
  })
}(), function () {
  "use strict";
  angular.module("ngMaterial.components", ["ngMaterial", "ngMaterial.components.templates", "ngMaterial.components.datePicker"])
}();
//# sourceMappingURL=data:application/json;base64,
