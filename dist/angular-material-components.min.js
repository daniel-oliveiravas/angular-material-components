!function(){angular.module("ngMaterial.components.templates",[]).run(["$templateCache",function(e){e.put("date-picker/date-picker-dialog.html",'<md-dialog class="mdc-date-picker">\n    <!-- Date picker -->\n    <div md-theme="{{mdTheme}}">\n      <!-- Current day of week -->\n      <md-toolbar class="md-hue-2 mdc-date-picker__current-day-of-week">\n        <span>{{ moment(selected.date).format(\'dddd\') }}</span>\n      </md-toolbar>\n\n      <!-- Current date -->\n      <md-toolbar class="mdc-date-picker__current-date">\n        <span>{{ moment(selected.date).format(\'MMM\') }}</span>\n        <strong>{{ moment(selected.date).format(\'DD\') }}</strong>\n        <a ng-click="displayYearSelection()">{{ moment(selected.date).format(\'YYYY\') }}</a>\n      </md-toolbar>\n\n      <!-- Calendar -->\n      <div class="mdc-date-picker__calendar" ng-if="!yearSelection">\n        <div class="mdc-date-picker__nav">\n          <md-button class="md-fab md-primary" ng-click="previousMonth()">\n            <i class="mdi mdi-chevron-left"></i>\n          </md-button>\n\n          <span>{{ activeDate.format(\'MMMM YYYY\') }}</span>\n\n          <md-button class="md-fab md-primary" ng-click="nextMonth()">\n            <i class="mdi mdi-chevron-right"></i>\n          </md-button>\n        </div>\n\n        <div class="mdc-date-picker__days-of-week">\n          <span ng-repeat="day in daysOfWeek">{{ day }}</span>\n        </div>\n\n        <div class="mdc-date-picker__days">\n                    <span class="mdc-date-picker__day mdc-date-picker__day--is-empty"\n                          ng-repeat="x in emptyFirstDays">&nbsp;</span><!--\n\n                 --><div class="mdc-date-picker__day"\n                         ng-class="{ \'mdc-date-picker__day--is-selected\': day.selected,\n                                     \'mdc-date-picker__day--is-today\': day.today }"\n                         ng-repeat="day in days">\n          <a ng-click="select(day)">{{ day ? day.format(\'D\') : \'\' }}</a>\n        </div><!--\n\n                 --><span class="mdc-date-picker__day mdc-date-picker__day--is-empty"\n                          ng-repeat="x in emptyLastDays">&nbsp;</span>\n        </div>\n      </div>\n\n      <!-- Year selection -->\n      <div class="mdc-date-picker__year-selector" ng-show="yearSelection">\n        <a class="mdc-date-picker__year"\n           ng-class="{ \'mdc-date-picker__year--is-active\': year == activeDate.format(\'YYYY\') }"\n           ng-repeat="year in years"\n           ng-click="selectYear(year)"\n           ng-if="yearSelection">\n          <span>{{year}}</span>\n        </a>\n      </div>\n\n      <!-- Actions -->\n      <div class="md-actions mdc-date-picker__actions" layout="row" layout-align="end">\n        <md-button class="md-primary" ng-click="cancel()">Cancel</md-button>\n        <md-button class="md-primary" ng-click="closePicker()">Ok</md-button>\n      </div>\n    </div>\n</md-dialog>\n'),e.put("date-picker/date-picker-input.html",'<md-input-container ng-click="openPicker($event)">\n  <label>{{label}}</label>\n  <input type="text" ng-model="selected.model" ng-disabled="true">\n</md-input-container>\n')}])}(),function(){"use strict";angular.module("ngMaterial.components.datePicker",["ngMaterial"]).controller("mdcDatePickerController",function(e,a,t,n,d,c){function i(e){return e?e:(null!==navigator.language?navigator.language:navigator.browserLanguage).split("_")[0].split("-")[0]||"en"}function o(){var a=[],t=angular.copy(e.activeDate).date(0),n=angular.copy(e.activeDate).date(1),d=angular.copy(n).endOf("month"),c=angular.copy(d).date();e.emptyFirstDays=[];for(var i=0===n.day()?6:n.day()-1;i>0;i--)e.emptyFirstDays.push({});for(var o=0;c>o;o++){var r=angular.copy(t.add(1,"days"));r.selected=angular.isDefined(e.selected.model)&&r.isSame(e.selected.date,"day"),r.today=r.isSame(moment(),"day"),a.push(r)}e.emptyLastDays=[];for(var l=7-(0===d.day()?7:d.day());l>0;l--)e.emptyLastDays.push({});e.days=a}e.model=n,e.mdTheme=c?c:"default";var r;this.build=function(a){r=a,moment.locale(r),angular.isDefined(e.model)?(e.selected={model:moment(e.model).format("LL"),date:e.model},e.activeDate=moment(e.model)):(e.selected={model:void 0,date:new Date},e.activeDate=moment()),e.moment=moment,e.days=[],e.daysOfWeek=[moment.weekdaysMin(1),moment.weekdaysMin(2),moment.weekdaysMin(3),moment.weekdaysMin(4),moment.weekdaysMin(5),moment.weekdaysMin(6),moment.weekdaysMin(0)],e.years=[];for(var t=moment().year()-100;t<=moment().year()+100;t++)e.years.push(t);o()},this.build(i(d)),e.previousMonth=function(){e.activeDate=e.activeDate.subtract(1,"month"),o()},e.nextMonth=function(){e.activeDate=e.activeDate.add(1,"month"),o()},e.select=function(a){e.selected={model:a.format("LL"),date:a.toDate()},e.model=a.toDate(),o()},e.selectYear=function(a){e.yearSelection=!1,e.selected.model=moment(e.selected.date).year(a).format("LL"),e.selected.date=moment(e.selected.date).year(a).toDate(),e.model=moment(e.selected.date).toDate(),e.activeDate=e.activeDate.add(a-e.activeDate.year(),"year"),o()},e.displayYearSelection=function(){var t=angular.element(".mdc-date-picker__calendar").outerHeight(),n=angular.element(".mdc-date-picker__year-selector");n.css({height:t}),e.yearSelection=!0,a(function(){var e=angular.element(".mdc-date-picker__year--is-active");n.scrollTop(n.scrollTop()+e.position().top-n.height()/2+e.height()/2)})},e.cancel=function(){t.hide()},e.closePicker=function(){t.hide(e.selected)}}).controller("mdcDatePickerInputController",function(e,a,t,n){e.selected=angular.isDefined(e.model)?{model:moment(e.model).format("LL"),date:e.model}:{model:void 0,date:new Date},e.openPicker=function(t){e.yearSelection=!1,n.show({targetEvent:t,templateUrl:"date-picker/date-picker-dialog.html",controller:"mdcDatePickerController",locals:{model:e.model,locale:a.locale,mdTheme:a.dialogMdTheme}}).then(function(a){a&&(e.selected=a,e.model=a.model)})}}).directive("mdcDatePicker",function(){return{restrict:"AE",controller:"mdcDatePickerInputController",scope:{model:"=",label:"@"},templateUrl:"date-picker/date-picker-input.html"}})}(),function(){"use strict";angular.module("ngMaterial.components",["ngMaterial","ngMaterial.components.templates","ngMaterial.components.datePicker"])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi50bXAvdGVtcGxhdGVzL3RlbXBsYXRlcy5qcyIsInNyYy9kYXRlLXBpY2tlci9kYXRlLXBpY2tlci5qcyIsInNyYy9jb21wb25lbnRzLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJydW4iLCIkdGVtcGxhdGVDYWNoZSIsInB1dCIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCIkdGltZW91dCIsIiRtZERpYWxvZyIsIm1vZGVsIiwibG9jYWxlIiwibWRUaGVtZSIsImNoZWNrTG9jYWxlIiwibmF2aWdhdG9yIiwibGFuZ3VhZ2UiLCJicm93c2VyTGFuZ3VhZ2UiLCJzcGxpdCIsImdlbmVyYXRlQ2FsZW5kYXIiLCJkYXlzIiwicHJldmlvdXNEYXkiLCJjb3B5IiwiYWN0aXZlRGF0ZSIsImRhdGUiLCJmaXJzdERheU9mTW9udGgiLCJsYXN0RGF5T2ZNb250aCIsImVuZE9mIiwibWF4RGF5cyIsImVtcHR5Rmlyc3REYXlzIiwiaSIsImRheSIsInB1c2giLCJqIiwiYWRkIiwic2VsZWN0ZWQiLCJpc0RlZmluZWQiLCJpc1NhbWUiLCJ0b2RheSIsIm1vbWVudCIsImVtcHR5TGFzdERheXMiLCJrIiwiYWN0aXZlTG9jYWxlIiwidGhpcyIsImJ1aWxkIiwiZm9ybWF0IiwidW5kZWZpbmVkIiwiRGF0ZSIsImRheXNPZldlZWsiLCJ3ZWVrZGF5c01pbiIsInllYXJzIiwieSIsInllYXIiLCJwcmV2aW91c01vbnRoIiwic3VidHJhY3QiLCJuZXh0TW9udGgiLCJzZWxlY3QiLCJ0b0RhdGUiLCJzZWxlY3RZZWFyIiwieWVhclNlbGVjdGlvbiIsImRpc3BsYXlZZWFyU2VsZWN0aW9uIiwiY2FsZW5kYXJIZWlnaHQiLCJlbGVtZW50Iiwib3V0ZXJIZWlnaHQiLCIkeWVhclNlbGVjdG9yIiwiY3NzIiwiaGVpZ2h0IiwiJGFjdGl2ZVllYXIiLCJzY3JvbGxUb3AiLCJwb3NpdGlvbiIsInRvcCIsImNhbmNlbCIsImhpZGUiLCJjbG9zZVBpY2tlciIsIiRhdHRycyIsIm9wZW5QaWNrZXIiLCJldiIsInNob3ciLCJ0YXJnZXRFdmVudCIsInRlbXBsYXRlVXJsIiwibG9jYWxzIiwiZGlhbG9nTWRUaGVtZSIsInRoZW4iLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInNjb3BlIiwibGFiZWwiXSwibWFwcGluZ3MiOiJDQUFBLFdBQUFBLFFBQUFDLE9BQUEsc0NBQUFDLEtBQUEsaUJBQUEsU0FBQUMsR0FBQUEsRUFBQUMsSUFBQSxzQ0FBQSxtd0ZBQ0FELEVBQUFDLElBQUEscUNBQUEscUxDREEsV0FHQSxZQUdBSixTQUFBQyxPQUFBLG9DQUFBLGVBQ0FJLFdBQUEsMEJBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxRQUFBQyxHQUFBRixHQUNBLE1BQUFBLEdBR0FBLEdBRkEsT0FBQUcsVUFBQUMsU0FBQUQsVUFBQUMsU0FBQUQsVUFBQUUsaUJBQUFDLE1BQUEsS0FBQSxHQUFBQSxNQUFBLEtBQUEsSUFBQSxLQStGQSxRQUFBQyxLQUNBLEdBQUFDLE1BQ0FDLEVBQUFuQixRQUFBb0IsS0FBQWQsRUFBQWUsWUFBQUMsS0FBQSxHQUNBQyxFQUFBdkIsUUFBQW9CLEtBQUFkLEVBQUFlLFlBQUFDLEtBQUEsR0FDQUUsRUFBQXhCLFFBQUFvQixLQUFBRyxHQUFBRSxNQUFBLFNBQ0FDLEVBQUExQixRQUFBb0IsS0FBQUksR0FBQUYsTUFFQWhCLEdBQUFxQixpQkFFQSxLQUFBLEdBQUFDLEdBQUEsSUFBQUwsRUFBQU0sTUFBQSxFQUFBTixFQUFBTSxNQUFBLEVBQUFELEVBQUEsRUFBQUEsSUFDQXRCLEVBQUFxQixlQUFBRyxRQUdBLEtBQUEsR0FBQUMsR0FBQSxFQUFBTCxFQUFBSyxFQUFBQSxJQUFBLENBQ0EsR0FBQVQsR0FBQXRCLFFBQUFvQixLQUFBRCxFQUFBYSxJQUFBLEVBQUEsUUFFQVYsR0FBQVcsU0FBQWpDLFFBQUFrQyxVQUFBNUIsRUFBQTJCLFNBQUF4QixRQUFBYSxFQUFBYSxPQUFBN0IsRUFBQTJCLFNBQUFYLEtBQUEsT0FDQUEsRUFB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QUFHLFFBS0FBLE1BQUFtQyxPQUNBdEIsS0FBQSxHQUFBdUIsT0FJQXZDLEVBQUFtRSxXQUFBLFNBQUFDLEdBQ0FwRSxFQUFBbUQsZUFBQSxFQUVBakQsRUFBQW1FLE1BQ0FDLFlBQUFGLEVBQ0FHLFlBQUEsc0NBQ0F4RSxXQUFBLDBCQUNBeUUsUUFBQXJFLE1BQUFILEVBQUFHLE1BQUFDLE9BQUE4RCxFQUFBOUQsT0FBQUMsUUFBQTZELEVBQUFPLGlCQUNBQyxLQUFBLFNBQUEvQyxHQUNBQSxJQUNBM0IsRUFBQTJCLFNBQUFBLEVBQ0EzQixFQUFBRyxNQUFBd0IsRUFBQXhCLFlBS0F3RSxVQUFBLGdCQUFBLFdBQ0EsT0FDQUMsU0FBQSxLQUNBN0UsV0FBQSwrQkFDQThFLE9BQ0ExRSxNQUFBLElBQ0EyRSxNQUFBLEtBRUFQLFlBQUEsMkNDdExBLFdBQUEsWUFFQTdFLFNBQUFDLE9BQUEseUJBQ0EsYUFDQSxrQ0FDQSIsImZpbGUiOiJhbmd1bGFyLW1hdGVyaWFsLWNvbXBvbmVudHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoXCJuZ01hdGVyaWFsLmNvbXBvbmVudHMudGVtcGxhdGVzXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHskdGVtcGxhdGVDYWNoZS5wdXQoXCJkYXRlLXBpY2tlci9kYXRlLXBpY2tlci1kaWFsb2cuaHRtbFwiLFwiPG1kLWRpYWxvZyBjbGFzcz1cXFwibWRjLWRhdGUtcGlja2VyXFxcIj5cXG4gICAgPCEtLSBEYXRlIHBpY2tlciAtLT5cXG4gICAgPGRpdiBtZC10aGVtZT1cXFwie3ttZFRoZW1lfX1cXFwiPlxcbiAgICAgIDwhLS0gQ3VycmVudCBkYXkgb2Ygd2VlayAtLT5cXG4gICAgICA8bWQtdG9vbGJhciBjbGFzcz1cXFwibWQtaHVlLTIgbWRjLWRhdGUtcGlja2VyX19jdXJyZW50LWRheS1vZi13ZWVrXFxcIj5cXG4gICAgICAgIDxzcGFuPnt7IG1vbWVudChzZWxlY3RlZC5kYXRlKS5mb3JtYXQoXFwnZGRkZFxcJykgfX08L3NwYW4+XFxuICAgICAgPC9tZC10b29sYmFyPlxcblxcbiAgICAgIDwhLS0gQ3VycmVudCBkYXRlIC0tPlxcbiAgICAgIDxtZC10b29sYmFyIGNsYXNzPVxcXCJtZGMtZGF0ZS1waWNrZXJfX2N1cnJlbnQtZGF0ZVxcXCI+XFxuICAgICAgICA8c3Bhbj57eyBtb21lbnQoc2VsZWN0ZWQuZGF0ZSkuZm9ybWF0KFxcJ01NTVxcJykgfX08L3NwYW4+XFxuICAgICAgICA8c3Ryb25nPnt7IG1vbWVudChzZWxlY3RlZC5kYXRlKS5mb3JtYXQoXFwnRERcXCcpIH19PC9zdHJvbmc+XFxuICAgICAgICA8YSBuZy1jbGljaz1cXFwiZGlzcGxheVllYXJTZWxlY3Rpb24oKVxcXCI+e3sgbW9tZW50KHNlbGVjdGVkLmRhdGUpLmZvcm1hdChcXCdZWVlZXFwnKSB9fTwvYT5cXG4gICAgICA8L21kLXRvb2xiYXI+XFxuXFxuICAgICAgPCEtLSBDYWxlbmRhciAtLT5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJtZGMtZGF0ZS1waWNrZXJfX2NhbGVuZGFyXFxcIiBuZy1pZj1cXFwiIXllYXJTZWxlY3Rpb25cXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibWRjLWRhdGUtcGlja2VyX19uYXZcXFwiPlxcbiAgICAgICAgICA8bWQtYnV0dG9uIGNsYXNzPVxcXCJtZC1mYWIgbWQtcHJpbWFyeVxcXCIgbmctY2xpY2s9XFxcInByZXZpb3VzTW9udGgoKVxcXCI+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcIm1kaSBtZGktY2hldnJvbi1sZWZ0XFxcIj48L2k+XFxuICAgICAgICAgIDwvbWQtYnV0dG9uPlxcblxcbiAgICAgICAgICA8c3Bhbj57eyBhY3RpdmVEYXRlLmZvcm1hdChcXCdNTU1NIFlZWVlcXCcpIH19PC9zcGFuPlxcblxcbiAgICAgICAgICA8bWQtYnV0dG9uIGNsYXNzPVxcXCJtZC1mYWIgbWQtcHJpbWFyeVxcXCIgbmctY2xpY2s9XFxcIm5leHRNb250aCgpXFxcIj5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwibWRpIG1kaS1jaGV2cm9uLXJpZ2h0XFxcIj48L2k+XFxuICAgICAgICAgIDwvbWQtYnV0dG9uPlxcbiAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJtZGMtZGF0ZS1waWNrZXJfX2RheXMtb2Ytd2Vla1xcXCI+XFxuICAgICAgICAgIDxzcGFuIG5nLXJlcGVhdD1cXFwiZGF5IGluIGRheXNPZldlZWtcXFwiPnt7IGRheSB9fTwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibWRjLWRhdGUtcGlja2VyX19kYXlzXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJtZGMtZGF0ZS1waWNrZXJfX2RheSBtZGMtZGF0ZS1waWNrZXJfX2RheS0taXMtZW1wdHlcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZy1yZXBlYXQ9XFxcInggaW4gZW1wdHlGaXJzdERheXNcXFwiPiZuYnNwOzwvc3Bhbj48IS0tXFxuXFxuICAgICAgICAgICAgICAgICAtLT48ZGl2IGNsYXNzPVxcXCJtZGMtZGF0ZS1waWNrZXJfX2RheVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgbmctY2xhc3M9XFxcInsgXFwnbWRjLWRhdGUtcGlja2VyX19kYXktLWlzLXNlbGVjdGVkXFwnOiBkYXkuc2VsZWN0ZWQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcJ21kYy1kYXRlLXBpY2tlcl9fZGF5LS1pcy10b2RheVxcJzogZGF5LnRvZGF5IH1cXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgIG5nLXJlcGVhdD1cXFwiZGF5IGluIGRheXNcXFwiPlxcbiAgICAgICAgICA8YSBuZy1jbGljaz1cXFwic2VsZWN0KGRheSlcXFwiPnt7IGRheSA/IGRheS5mb3JtYXQoXFwnRFxcJykgOiBcXCdcXCcgfX08L2E+XFxuICAgICAgICA8L2Rpdj48IS0tXFxuXFxuICAgICAgICAgICAgICAgICAtLT48c3BhbiBjbGFzcz1cXFwibWRjLWRhdGUtcGlja2VyX19kYXkgbWRjLWRhdGUtcGlja2VyX19kYXktLWlzLWVtcHR5XFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmctcmVwZWF0PVxcXCJ4IGluIGVtcHR5TGFzdERheXNcXFwiPiZuYnNwOzwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcblxcbiAgICAgIDwhLS0gWWVhciBzZWxlY3Rpb24gLS0+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwibWRjLWRhdGUtcGlja2VyX195ZWFyLXNlbGVjdG9yXFxcIiBuZy1zaG93PVxcXCJ5ZWFyU2VsZWN0aW9uXFxcIj5cXG4gICAgICAgIDxhIGNsYXNzPVxcXCJtZGMtZGF0ZS1waWNrZXJfX3llYXJcXFwiXFxuICAgICAgICAgICBuZy1jbGFzcz1cXFwieyBcXCdtZGMtZGF0ZS1waWNrZXJfX3llYXItLWlzLWFjdGl2ZVxcJzogeWVhciA9PSBhY3RpdmVEYXRlLmZvcm1hdChcXCdZWVlZXFwnKSB9XFxcIlxcbiAgICAgICAgICAgbmctcmVwZWF0PVxcXCJ5ZWFyIGluIHllYXJzXFxcIlxcbiAgICAgICAgICAgbmctY2xpY2s9XFxcInNlbGVjdFllYXIoeWVhcilcXFwiXFxuICAgICAgICAgICBuZy1pZj1cXFwieWVhclNlbGVjdGlvblxcXCI+XFxuICAgICAgICAgIDxzcGFuPnt7eWVhcn19PC9zcGFuPlxcbiAgICAgICAgPC9hPlxcbiAgICAgIDwvZGl2PlxcblxcbiAgICAgIDwhLS0gQWN0aW9ucyAtLT5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJtZC1hY3Rpb25zIG1kYy1kYXRlLXBpY2tlcl9fYWN0aW9uc1xcXCIgbGF5b3V0PVxcXCJyb3dcXFwiIGxheW91dC1hbGlnbj1cXFwiZW5kXFxcIj5cXG4gICAgICAgIDxtZC1idXR0b24gY2xhc3M9XFxcIm1kLXByaW1hcnlcXFwiIG5nLWNsaWNrPVxcXCJjYW5jZWwoKVxcXCI+Q2FuY2VsPC9tZC1idXR0b24+XFxuICAgICAgICA8bWQtYnV0dG9uIGNsYXNzPVxcXCJtZC1wcmltYXJ5XFxcIiBuZy1jbGljaz1cXFwiY2xvc2VQaWNrZXIoKVxcXCI+T2s8L21kLWJ1dHRvbj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuPC9tZC1kaWFsb2c+XFxuXCIpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KFwiZGF0ZS1waWNrZXIvZGF0ZS1waWNrZXItaW5wdXQuaHRtbFwiLFwiPG1kLWlucHV0LWNvbnRhaW5lciBuZy1jbGljaz1cXFwib3BlblBpY2tlcigkZXZlbnQpXFxcIj5cXG4gIDxsYWJlbD57e2xhYmVsfX08L2xhYmVsPlxcbiAgPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIG5nLW1vZGVsPVxcXCJzZWxlY3RlZC5tb2RlbFxcXCIgbmctZGlzYWJsZWQ9XFxcInRydWVcXFwiPlxcbjwvbWQtaW5wdXQtY29udGFpbmVyPlxcblwiKTt9XSk7IiwiLyogZ2xvYmFsIGFuZ3VsYXIgKi9cbi8qIGdsb2JhbCBtb21lbnQgKi9cbi8qIGdsb2JhbCBuYXZpZ2F0b3IgKi9cbid1c2Ugc3RyaWN0JzsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG5cblxuYW5ndWxhci5tb2R1bGUoJ25nTWF0ZXJpYWwuY29tcG9uZW50cy5kYXRlUGlja2VyJywgWyduZ01hdGVyaWFsJ10pXG4uY29udHJvbGxlcignbWRjRGF0ZVBpY2tlckNvbnRyb2xsZXInLCBmdW5jdGlvbiAoJHNjb3BlLCAkdGltZW91dCwgJG1kRGlhbG9nLCBtb2RlbCwgbG9jYWxlLCBtZFRoZW1lKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tMb2NhbGUobG9jYWxlKSB7XG4gICAgICBpZiAoIWxvY2FsZSkge1xuICAgICAgICByZXR1cm4gKG5hdmlnYXRvci5sYW5ndWFnZSAhPT0gbnVsbCA/IG5hdmlnYXRvci5sYW5ndWFnZSA6IG5hdmlnYXRvci5icm93c2VyTGFuZ3VhZ2UpLnNwbGl0KCdfJylbMF0uc3BsaXQoJy0nKVswXSB8fCAnZW4nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICB9XG5cbiAgICAkc2NvcGUubW9kZWwgPSBtb2RlbDtcbiAgICAkc2NvcGUubWRUaGVtZSA9IG1kVGhlbWUgPyBtZFRoZW1lIDogJ2RlZmF1bHQnO1xuXG4gICAgdmFyIGFjdGl2ZUxvY2FsZTtcblxuICAgIHRoaXMuYnVpbGQgPSBmdW5jdGlvbiAobG9jYWxlKSB7XG4gICAgICBhY3RpdmVMb2NhbGUgPSBsb2NhbGU7XG5cbiAgICAgIG1vbWVudC5sb2NhbGUoYWN0aXZlTG9jYWxlKTtcblxuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKCRzY29wZS5tb2RlbCkpIHtcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkID0ge1xuICAgICAgICAgIG1vZGVsOiBtb21lbnQoJHNjb3BlLm1vZGVsKS5mb3JtYXQoJ0xMJyksXG4gICAgICAgICAgZGF0ZTogJHNjb3BlLm1vZGVsXG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmFjdGl2ZURhdGUgPSBtb21lbnQoJHNjb3BlLm1vZGVsKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAkc2NvcGUuc2VsZWN0ZWQgPSB7XG4gICAgICAgICAgbW9kZWw6IHVuZGVmaW5lZCxcbiAgICAgICAgICBkYXRlOiBuZXcgRGF0ZSgpXG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmFjdGl2ZURhdGUgPSBtb21lbnQoKTtcbiAgICAgIH1cblxuICAgICAgJHNjb3BlLm1vbWVudCA9IG1vbWVudDtcblxuICAgICAgJHNjb3BlLmRheXMgPSBbXTtcbiAgICAgIC8vVE9ETzogVXNlIG1vbWVudCBsb2NhbGUgdG8gc2V0IGZpcnN0IGRheSBvZiB3ZWVrIHByb3Blcmx5LlxuICAgICAgJHNjb3BlLmRheXNPZldlZWsgPSBbbW9tZW50LndlZWtkYXlzTWluKDEpLCBtb21lbnQud2Vla2RheXNNaW4oMiksIG1vbWVudC53ZWVrZGF5c01pbigzKSwgbW9tZW50LndlZWtkYXlzTWluKDQpLCBtb21lbnQud2Vla2RheXNNaW4oNSksIG1vbWVudC53ZWVrZGF5c01pbig2KSwgbW9tZW50LndlZWtkYXlzTWluKDApXTtcblxuICAgICAgJHNjb3BlLnllYXJzID0gW107XG5cbiAgICAgIGZvciAodmFyIHkgPSBtb21lbnQoKS55ZWFyKCkgLSAxMDA7IHkgPD0gbW9tZW50KCkueWVhcigpICsgMTAwOyB5KyspIHtcbiAgICAgICAgJHNjb3BlLnllYXJzLnB1c2goeSk7XG4gICAgICB9XG5cbiAgICAgIGdlbmVyYXRlQ2FsZW5kYXIoKTtcbiAgICB9O1xuICAgIHRoaXMuYnVpbGQoY2hlY2tMb2NhbGUobG9jYWxlKSk7XG5cbiAgICAkc2NvcGUucHJldmlvdXNNb250aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICRzY29wZS5hY3RpdmVEYXRlID0gJHNjb3BlLmFjdGl2ZURhdGUuc3VidHJhY3QoMSwgJ21vbnRoJyk7XG4gICAgICBnZW5lcmF0ZUNhbGVuZGFyKCk7XG4gICAgfTtcblxuICAgICRzY29wZS5uZXh0TW9udGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAkc2NvcGUuYWN0aXZlRGF0ZSA9ICRzY29wZS5hY3RpdmVEYXRlLmFkZCgxLCAnbW9udGgnKTtcbiAgICAgIGdlbmVyYXRlQ2FsZW5kYXIoKTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLnNlbGVjdCA9IGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICRzY29wZS5zZWxlY3RlZCA9IHtcbiAgICAgICAgbW9kZWw6IGRheS5mb3JtYXQoJ0xMJyksXG4gICAgICAgIGRhdGU6IGRheS50b0RhdGUoKVxuICAgICAgfTtcblxuICAgICAgJHNjb3BlLm1vZGVsID0gZGF5LnRvRGF0ZSgpO1xuXG4gICAgICBnZW5lcmF0ZUNhbGVuZGFyKCk7XG4gICAgfTtcblxuICAgICRzY29wZS5zZWxlY3RZZWFyID0gZnVuY3Rpb24gKHllYXIpIHtcbiAgICAgICRzY29wZS55ZWFyU2VsZWN0aW9uID0gZmFsc2U7XG5cbiAgICAgICRzY29wZS5zZWxlY3RlZC5tb2RlbCA9IG1vbWVudCgkc2NvcGUuc2VsZWN0ZWQuZGF0ZSkueWVhcih5ZWFyKS5mb3JtYXQoJ0xMJyk7XG4gICAgICAkc2NvcGUuc2VsZWN0ZWQuZGF0ZSA9IG1vbWVudCgkc2NvcGUuc2VsZWN0ZWQuZGF0ZSkueWVhcih5ZWFyKS50b0RhdGUoKTtcbiAgICAgICRzY29wZS5tb2RlbCA9IG1vbWVudCgkc2NvcGUuc2VsZWN0ZWQuZGF0ZSkudG9EYXRlKCk7XG4gICAgICAkc2NvcGUuYWN0aXZlRGF0ZSA9ICRzY29wZS5hY3RpdmVEYXRlLmFkZCh5ZWFyIC0gJHNjb3BlLmFjdGl2ZURhdGUueWVhcigpLCAneWVhcicpO1xuXG4gICAgICBnZW5lcmF0ZUNhbGVuZGFyKCk7XG4gICAgfTtcbiAgICAkc2NvcGUuZGlzcGxheVllYXJTZWxlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvL1RPRE86IFRoaXMgcmVxdWlyZXMgSlF1ZXJ5IGFuZCBtdXN0IGJlIHJld3JpdHRlblxuICAgICAgdmFyIGNhbGVuZGFySGVpZ2h0ID0gYW5ndWxhci5lbGVtZW50KCcubWRjLWRhdGUtcGlja2VyX19jYWxlbmRhcicpLm91dGVySGVpZ2h0KCksXG4gICAgICAgICR5ZWFyU2VsZWN0b3IgPSBhbmd1bGFyLmVsZW1lbnQoJy5tZGMtZGF0ZS1waWNrZXJfX3llYXItc2VsZWN0b3InKTtcblxuICAgICAgJHllYXJTZWxlY3Rvci5jc3Moe2hlaWdodDogY2FsZW5kYXJIZWlnaHR9KTtcblxuICAgICAgJHNjb3BlLnllYXJTZWxlY3Rpb24gPSB0cnVlO1xuXG4gICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkYWN0aXZlWWVhciA9IGFuZ3VsYXIuZWxlbWVudCgnLm1kYy1kYXRlLXBpY2tlcl9feWVhci0taXMtYWN0aXZlJyk7XG5cbiAgICAgICAgJHllYXJTZWxlY3Rvci5zY3JvbGxUb3AoJHllYXJTZWxlY3Rvci5zY3JvbGxUb3AoKSArICRhY3RpdmVZZWFyLnBvc2l0aW9uKCkudG9wIC0gJHllYXJTZWxlY3Rvci5oZWlnaHQoKSAvIDIgKyAkYWN0aXZlWWVhci5oZWlnaHQoKSAvIDIpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlQ2FsZW5kYXIoKSB7XG4gICAgICB2YXIgZGF5cyA9IFtdLFxuICAgICAgICBwcmV2aW91c0RheSA9IGFuZ3VsYXIuY29weSgkc2NvcGUuYWN0aXZlRGF0ZSkuZGF0ZSgwKSxcbiAgICAgICAgZmlyc3REYXlPZk1vbnRoID0gYW5ndWxhci5jb3B5KCRzY29wZS5hY3RpdmVEYXRlKS5kYXRlKDEpLFxuICAgICAgICBsYXN0RGF5T2ZNb250aCA9IGFuZ3VsYXIuY29weShmaXJzdERheU9mTW9udGgpLmVuZE9mKCdtb250aCcpLFxuICAgICAgICBtYXhEYXlzID0gYW5ndWxhci5jb3B5KGxhc3REYXlPZk1vbnRoKS5kYXRlKCk7XG5cbiAgICAgICRzY29wZS5lbXB0eUZpcnN0RGF5cyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gZmlyc3REYXlPZk1vbnRoLmRheSgpID09PSAwID8gNiA6IGZpcnN0RGF5T2ZNb250aC5kYXkoKSAtIDE7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgJHNjb3BlLmVtcHR5Rmlyc3REYXlzLnB1c2goe30pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1heERheXM7IGorKykge1xuICAgICAgICB2YXIgZGF0ZSA9IGFuZ3VsYXIuY29weShwcmV2aW91c0RheS5hZGQoMSwgJ2RheXMnKSk7XG5cbiAgICAgICAgZGF0ZS5zZWxlY3RlZCA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRzY29wZS5zZWxlY3RlZC5tb2RlbCkgJiYgZGF0ZS5pc1NhbWUoJHNjb3BlLnNlbGVjdGVkLmRhdGUsICdkYXknKTtcbiAgICAgICAgZGF0ZS50b2RheSA9IGRhdGUuaXNTYW1lKG1vbWVudCgpLCAnZGF5Jyk7XG5cbiAgICAgICAgZGF5cy5wdXNoKGRhdGUpO1xuICAgICAgfVxuXG4gICAgICAkc2NvcGUuZW1wdHlMYXN0RGF5cyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBrID0gNyAtIChsYXN0RGF5T2ZNb250aC5kYXkoKSA9PT0gMCA/IDcgOiBsYXN0RGF5T2ZNb250aC5kYXkoKSk7IGsgPiAwOyBrLS0pIHtcbiAgICAgICAgJHNjb3BlLmVtcHR5TGFzdERheXMucHVzaCh7fSk7XG4gICAgICB9XG5cbiAgICAgICRzY29wZS5kYXlzID0gZGF5cztcbiAgICB9XG5cbiAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgICAkbWREaWFsb2cuaGlkZSgpO1xuICAgIH07XG5cbiAgICAkc2NvcGUuY2xvc2VQaWNrZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAkbWREaWFsb2cuaGlkZSgkc2NvcGUuc2VsZWN0ZWQpO1xuICAgIH07XG4gIH0pXG4uY29udHJvbGxlcignbWRjRGF0ZVBpY2tlcklucHV0Q29udHJvbGxlcicsIGZ1bmN0aW9uICgkc2NvcGUsICRhdHRycywgJHRpbWVvdXQsICRtZERpYWxvZykge1xuICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZCgkc2NvcGUubW9kZWwpKSB7XG4gICAgICAkc2NvcGUuc2VsZWN0ZWQgPSB7XG4gICAgICAgIG1vZGVsOiBtb21lbnQoJHNjb3BlLm1vZGVsKS5mb3JtYXQoJ0xMJyksXG4gICAgICAgIGRhdGU6ICRzY29wZS5tb2RlbFxuICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAkc2NvcGUuc2VsZWN0ZWQgPSB7XG4gICAgICAgIG1vZGVsOiB1bmRlZmluZWQsXG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgJHNjb3BlLm9wZW5QaWNrZXIgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICRzY29wZS55ZWFyU2VsZWN0aW9uID0gZmFsc2U7XG5cbiAgICAgICRtZERpYWxvZy5zaG93KHtcbiAgICAgICAgdGFyZ2V0RXZlbnQ6IGV2LFxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2RhdGUtcGlja2VyL2RhdGUtcGlja2VyLWRpYWxvZy5odG1sJyxcbiAgICAgICAgY29udHJvbGxlcjogJ21kY0RhdGVQaWNrZXJDb250cm9sbGVyJyxcbiAgICAgICAgbG9jYWxzOiB7bW9kZWw6ICRzY29wZS5tb2RlbCwgbG9jYWxlOiAkYXR0cnMubG9jYWxlLCBtZFRoZW1lOiAkYXR0cnMuZGlhbG9nTWRUaGVtZX1cbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHNlbGVjdGVkKSB7XG4gICAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICAgICRzY29wZS5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgICAgICRzY29wZS5tb2RlbCA9IHNlbGVjdGVkLm1vZGVsO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICB9KVxuLmRpcmVjdGl2ZSgnbWRjRGF0ZVBpY2tlcicsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBRScsXG4gICAgICBjb250cm9sbGVyOiAnbWRjRGF0ZVBpY2tlcklucHV0Q29udHJvbGxlcicsXG4gICAgICBzY29wZToge1xuICAgICAgICBtb2RlbDogJz0nLFxuICAgICAgICBsYWJlbDogJ0AnXG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVVcmw6ICdkYXRlLXBpY2tlci9kYXRlLXBpY2tlci1pbnB1dC5odG1sJ1xuICAgIH07XG4gIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnbmdNYXRlcmlhbC5jb21wb25lbnRzJywgW1xuICAnbmdNYXRlcmlhbCcsXG4gICduZ01hdGVyaWFsLmNvbXBvbmVudHMudGVtcGxhdGVzJyxcbiAgJ25nTWF0ZXJpYWwuY29tcG9uZW50cy5kYXRlUGlja2VyJ1xuXSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=