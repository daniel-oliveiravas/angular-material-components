!function () {
  angular.module("ngMaterial.components.templates", []).run(["$templateCache", function (e) {
    e.put("date-picker/date-picker-dialog.html", '<md-dialog class="mdc-date-picker">\n    <!-- Date picker -->\n    <div md-theme="{{mdTheme}}">\n      <!-- Current day of week -->\n      <md-toolbar class="md-hue-2 mdc-date-picker__current-day-of-week">\n        <span>{{ moment(selected.date).format(\'dddd\') }}</span>\n      </md-toolbar>\n\n      <!-- Current date -->\n      <md-toolbar class="mdc-date-picker__current-date">\n        <span>{{ moment(selected.date).format(\'MMM\') }}</span>\n        <strong>{{ moment(selected.date).format(\'DD\') }}</strong>\n        <a ng-click="displayYearSelection()">{{ moment(selected.date).format(\'YYYY\') }}</a>\n      </md-toolbar>\n\n      <!-- Calendar -->\n      <div class="mdc-date-picker__calendar" ng-if="!yearSelection">\n        <div class="mdc-date-picker__nav">\n          <md-button class="md-fab md-primary" aria-label="Previous month" ng-click="previousMonth()">\n            <i class="mdi mdi-chevron-left"></i>\n          </md-button>\n\n          <span>{{ activeDate.format(\'MMMM YYYY\') }}</span>\n\n          <md-button class="md-fab md-primary" arial-label="Next month" ng-click="nextMonth()">\n            <i class="mdi mdi-chevron-right"></i>\n          </md-button>\n        </div>\n\n        <div class="mdc-date-picker__days-of-week">\n          <span ng-repeat="day in daysOfWeek">{{ day }}</span>\n        </div>\n\n        <div class="mdc-date-picker__days">\n                    <span class="mdc-date-picker__day mdc-date-picker__day--is-empty"\n                          ng-repeat="x in emptyFirstDays">&nbsp;</span><!--\n\n                 --><div class="mdc-date-picker__day"\n                         ng-class="{ \'mdc-date-picker__day--is-selected\': day.selected,\n                                     \'mdc-date-picker__day--is-today\': day.today }"\n                         ng-repeat="day in days">\n          <a ng-click="select(day)">{{ day ? day.format(\'D\') : \'\' }}</a>\n        </div><!--\n\n                 --><span class="mdc-date-picker__day mdc-date-picker__day--is-empty"\n                          ng-repeat="x in emptyLastDays">&nbsp;</span>\n        </div>\n      </div>\n\n      <!-- Year selection -->\n      <div class="mdc-date-picker__year-selector" ng-show="yearSelection">\n        <a class="mdc-date-picker__year"\n           ng-class="{ \'mdc-date-picker__year--is-active\': year == activeDate.format(\'YYYY\') }"\n           ng-repeat="year in years"\n           ng-click="selectYear(year)"\n           ng-if="yearSelection">\n          <span>{{year}}</span>\n        </a>\n      </div>\n\n      <!-- Actions -->\n      <div class="md-actions mdc-date-picker__actions" layout="row" layout-align="end">\n        <md-button class="md-primary" ng-click="cancel()">Cancel</md-button>\n        <md-button class="md-primary" ng-click="closePicker()">Ok</md-button>\n      </div>\n    </div>\n</md-dialog>\n'), e.put("date-picker/date-picker-input.html", '<md-input-container ng-click="openPicker($event)">\n  <label>{{label}}</label>\n  <input type="text" ng-model="selected.model" ng-disabled="true" ng-click="openPicker($event)">\n</md-input-container>\n')
  }])
}(), function () {
  "use strict";
  angular.module("ngMaterial.components.datePicker", ["ngMaterial"]).controller("mdcDatePickerController", function (e, a, t, n, d, c, o, i) {
    function l(e) {
      return e ? e : (null !== navigator.language ? navigator.language : navigator.browserLanguage).split("_")[0].split("-")[0] || "en"
    }

    function r() {
      var a = [], t = angular.copy(e.activeDate).date(0), n = angular.copy(e.activeDate).date(1), d = angular.copy(n).endOf("month"), c = angular.copy(d).date();
      e.emptyFirstDays = [];
      for (var o = 0 === n.day() ? 6 : n.day() - 1; o > 0; o--)e.emptyFirstDays.push({});
      for (var i = 0; c > i; i++) {
        var l = angular.copy(t.add(1, "days"));
        l.selected = angular.isDefined(e.selected.model) && l.isSame(e.selected.date, "day"), l.today = l.isSame(moment(), "day"), a.push(l)
      }
      e.emptyLastDays = [];
      for (var r = 7 - (0 === d.day() ? 7 : d.day()); r > 0; r--)e.emptyLastDays.push({});
      e.days = a
    }

    e.model = d, e.mdTheme = o ? o : "default";
    var m;
    this.build = function (a) {
      m = a, moment.locale(m), angular.isDefined(e.model) ? (e.selected = {model: moment(e.model, i).format(i), date: moment(e.model, i).toDate()}, e.activeDate = moment(e.model)) : (e.selected = {model: void 0, date: new Date}, e.activeDate = moment()), e.moment = moment, e.days = [], e.daysOfWeek = [moment.weekdaysMin(1), moment.weekdaysMin(2), moment.weekdaysMin(3), moment.weekdaysMin(4), moment.weekdaysMin(5), moment.weekdaysMin(6), moment.weekdaysMin(0)], e.years = [];
      for (var t = moment().year() - 100; t <= moment().year() + 100; t++)e.years.push(t);
      r()
    }, this.build(l(c)), e.previousMonth = function () {
      e.activeDate = e.activeDate.subtract(1, "month"), r()
    }, e.nextMonth = function () {
      e.activeDate = e.activeDate.add(1, "month"), r()
    }, e.select = function (a) {
      e.selected = {model: a.format(i), date: a.toDate()}, e.model = a.toDate(), r()
    }, e.selectYear = function (a) {
      e.yearSelection = !1, e.selected.model = moment(e.selected.date).year(a).format(i), e.selected.date = moment(e.selected.date).year(a).toDate(), e.model = moment(e.selected.date).toDate(), e.activeDate = e.activeDate.add(a - e.activeDate.year(), "year"), r()
    }, e.displayYearSelection = function () {
      var t = n[0].getElementsByClassName("mdc-date-picker__calendar")[0].offsetHeight, d = n[0].getElementsByClassName("mdc-date-picker__year-selector")[0];
      d.style.height = t + "px", e.yearSelection = !0, a(function () {
        var e = n[0].getElementsByClassName("mdc-date-picker__year--is-active")[0];
        d.scrollTop = d.scrollTop + e.offsetTop - d.offsetHeight / 2 + e.offsetHeight / 2
      })
    }, e.cancel = function () {
      t.hide()
    }, e.closePicker = function () {
      t.hide(e.selected)
    }
  }).controller("mdcDatePickerInputController", function (e, a, t, n) {
    e.selected = angular.isDefined(e.model) ? {model: moment(e.model).format(e.dateFormat), date: e.model} : {model: void 0, date: new Date}, e.openPicker = function (t) {
      e.yearSelection = !1, n.show({targetEvent: t, templateUrl: "date-picker/date-picker-dialog.html", controller: "mdcDatePickerController", locals: {model: e.model, locale: a.locale, mdTheme: a.dialogMdTheme, dateFormat: e.dateFormat}}).then(function (a) {
        a && (e.selected = a, e.model = a.model)
      })
    }
  }).directive("mdcDatePicker", function () {
    return {restrict: "AE", controller: "mdcDatePickerInputController", scope: {model: "=", label: "@", dateFormat: "@"}, templateUrl: "date-picker/date-picker-input.html"}
  })
}(), function () {
  "use strict";
  angular.module("ngMaterial.components", ["ngMaterial", "ngMaterial.components.templates", "ngMaterial.components.datePicker"])
}();
//# sourceMappingURL=data:application/json;base64,
